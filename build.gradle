plugins {
    id 'net.ltgt.apt' version '0.9'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'net.ltgt.apt'

repositories {
    jcenter()
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.21'
	//compile 'org.mapstruct:mapstruct-processor:1.1.0.Final'
	compile 'org.mapstruct:mapstruct-jdk8:1.1.0.Final'
	
	compile 'javax.validation:validation-api:1.1.0.Final'
	compile 'org.hibernate:hibernate-validator:5.2.4.Final'
	compileOnly 'org.projectlombok:lombok:1.16.16'
	
	apt 'org.projectlombok:lombok:1.16.16'
    apt "org.mapstruct:mapstruct-processor:1.1.0.Final"
    compileOnly 'org.mapstruct:mapstruct-processor:1.1.0.Final'


    testCompile 'junit:junit:4.12'
}

ext { aptDir='.apt_generated' }
 
eclipse {
    jdt.file.withProperties { it['org.eclipse.jdt.core.compiler.processAnnotations'] = 'enabled' }
    classpath {
        containers = [
            'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
        ]
    }
}
 
eclipseJdt {
    def clos = []
 
    def fp = file('.factorypath')
    outputs.file fp
    clos += {
        fp.withWriter {
            def domaJar = configurations.apt.find {
                it.name.startsWith('mapstruct')
            }
            new groovy.xml.MarkupBuilder(it).factorypath() {
                factorypathentry(kind:'EXTJAR', id:domaJar, enabled:true, runInBatchMode:false)
            }
        }
    }
 
    def prefs = { name, contents ->
        def f = file(".settings/$name")
        clos += {
            f.text = contents.stripMargin()
        }
        outputs.file f
    }
 
    prefs 'org.eclipse.jdt.apt.core.prefs', """\
        |eclipse.preferences.version=1
        |org.eclipse.jdt.apt.aptEnabled=true
        |org.eclipse.jdt.apt.genSrcDir=${aptDir}
        |org.eclipse.jdt.apt.reconcileEnabled=true
        |"""
 
    doLast { clos*.run() }
}

task eclipseSettings(type: Copy) {
  from rootProject.files(
    "eclipse/org.eclipse.jdt.ui.prefs")
  into project.file('.settings/')
  outputs.upToDateWhen { false }
}

task eclipseJdtPrepare(type: Copy) {
  from rootProject.file("eclipse/org.eclipse.jdt.core.prefs")
  into project.file(".settings/")
  outputs.upToDateWhen { false }
}

task cleanEclipseJdtUi(type: Delete) {
  delete project.file(".settings/org.eclipse.jdt.ui.prefs")
  delete project.file(".settings/org.eclipse.jdt.core.prefs")
}

tasks["eclipseJdt"].dependsOn(eclipseJdtPrepare)
tasks["cleanEclipse"].dependsOn(cleanEclipseJdtUi)
tasks["eclipse"].dependsOn(eclipseSettings)